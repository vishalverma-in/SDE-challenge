class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int rows = matrix.size();
        int cols = matrix[0].size();
        
//         for(int i = 0; i < rows; i++)
//         {
//             if(matrix[i][cols-1] >= target)
//             {
//                 for(int j = cols-1; j>=0; j--)
//                 {
//                     if(matrix[i][j]==target) return true;
//                 }
//             }
//         }
       
//         return false;
        
        // Optimized by binary search
        if(rows == 0 || cols == 0)
            return false;
        
        int start = 0;
        int end = (rows*cols)-1;
        
        while(start <= end)
        {
            int mid = start + (end-start)/2;
            int ind = matrix[mid/cols][mid%cols];
            
            if(target == ind) return true;
            else if(target < ind) end = mid-1;
            else start = mid+1;
        }
        
        return false;
    }
};

/* Approach:
1. Here i used binary search on the 2d-matrix with end elements as rows*cols-1;
2. Always remember to find the index of middle element use ind = matrix[mid/cols][mid%cols];
3. Other procedure is same as the  binary search
*/
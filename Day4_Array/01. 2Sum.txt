class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        int n = nums.size();
        vector<pair<int,int>> v;
        for(int i = 0;i < n; i++)
        {
            v.push_back({nums[i], i});
        }
        sort(v.begin(), v.end());
        int left = 0, right = n-1;
        vector<int> res;
        while(left < right)
        {
            int sum = v[left].first+v[right].first;
            if(sum==target) 
            {
                return {v[left].second, v[right].second};
            }
            else if(sum > target) right--;
            else left++;
        }
        return {-1,-1};
    }
};

/* Approach:
1. Sort the array in ascending order.
2. take two pointers left and right, left at index 0 and right at index n-1;
3. calculate sum of elements at index left and left and right, if sum == target then return the indices.
4. If sum is lesser than target then left++ else right++;
*/
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int n = nums.size();
        int sum = 0;
        int mx = INT_MIN;
        for(int i = 0; i < n; i++)
        {
            sum += nums[i];
            mx = max(sum, mx);
            if(sum < 0) sum = 0;
        }
        
        return mx;
    }
};


/* Approach:
1. Kadane's Algorithm is used in it;
2. Maintain a variable mx to store the maximum sum of the contiguous array;
3. Iterate from left;
4. After that maintain a variable sum which will compute the sum from a one index upcoming untill the sum becomes negative, if it becomes negative at any point of time then make sum = 0 and follow the same procedure untill the end of the loop;
*/
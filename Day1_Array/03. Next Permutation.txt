class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int n = nums.size();
        int breakpoint = -1; 
        for(int i = n-2; i >= 0; i--)
        {
            if(nums[i] < nums[i+1])
            {
                breakpoint = i;
                break;
            }
        }
        
        if(breakpoint == -1) 
        {
            reverse(nums.begin(), nums.end());
            return;
        }
        
        for(int i = n-1; i >= 0; i--)
        {
            if(nums[i] > nums[breakpoint])
            {
                swap(nums[i], nums[breakpoint]);
                reverse((nums.begin()+breakpoint+1), nums.end());
                return;
            }
        }
    }
};


/*Approach:
1. In order to find the next permutation we have to find the breakpoint;
2. Start from the right of the array, it must be in ascending order in iterating from the right;
3. While iterating from the right if it finds the element lesser than the previous then that lesser element's index is the breakpoint;
4. Now again iterate from the right and when we find element greater than nums[breakpoint], then swap.
5. Reverse the array from breakpoint+1 to the end.
6. If no breakpoint is found reverse the whole array.
*/
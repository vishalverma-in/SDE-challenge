class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int slow = nums[0], fast = nums[0];
        
        do
        {
            slow = nums[slow];
            fast = nums[nums[fast]];
        }while(slow!=fast);
        
        fast = nums[0];
        
        while(slow!=fast)
        {
            slow = nums[slow];
            fast = nums[fast];
        }
        
        return slow;
    }
};
/* Approach:
Tortoise and Hare Algo:

1. Take two pointers (basically integers) namely, slow and fast. Initially both will point to first element
2. Increase slow by 1 and fast by two.
3. Step 2 will be done as follows: slow = nums[slow]; fast = nums[nums[fast]].
4. There will be one time when slow and fast will meet. They will meet in a cycle.
5. At step 4 we have to stop.
6. Now move fast to initial position i.e. fast = nums[0].
7. Now move both slow and fast by one position till both of them meet.
8. Step 7 increment will be done as follows: slow = nums[slow]; fast = nums[fast].
9. The node at which both slow and fast will meet will be the duplicate number.
10. Return slow or fast :).
*/


//Another solution

// class Solution {
// public:
//     int findDuplicate(vector<int>& nums) {
//         for(int i = 0; i < nums.size(); i++)
//         {
//             int index = abs(nums[i]) - 1;
//             nums[index] *= -1;
//             if(nums[index] > 0) return abs(nums[i]);
//         }
//         return -1;
//     }
// };

/*Approach:
1. Traverse the array and multiply then (element - 1) index with -1;
2. If the element is repeated twice then its indexed element will be multiplied with -1 twice and therefore it will be positive and we will get the repeated element.
*/



class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        vector<vector<int>> result;
        if(intervals.size()==0)return result;
        sort(intervals.begin(), intervals.end());
        result.push_back(intervals[0]);
        int j = 0;
        for(int i = 1; i < intervals.size(); i++)
        {
            if(result[j][1] >= intervals[i][0])
            {
                result[j][1] = max(result[j][1], intervals[i][1]);
                
            }
            else
            {
                j++;
                result.push_back(intervals[i]);
                
            }
            
        }
        
        return result;
    }
};

/* Approach;
1. Sort the intervals array so that element at [i][0] index is in ascending order.
2. Create a 2d vector result to store the answer.
3. Firstly push intervals[0] in the result and then started a loop with i=1;
4. Internal pointer j will move only to 0 and 1, firstly it is at 0;
5. We update result[j][1] if it >= result[i][0] to the max(result[j][1], intervals[i][1]). This will check untill result[j][0] lesser than intervals[i][0].
6. If result[j][0] lesser than intervals[i][0] then we will move j = j+1 and push intervals[i] in the result vector;
7. Finally we will return the result;
*/